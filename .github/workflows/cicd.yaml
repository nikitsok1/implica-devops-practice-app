name: Build and containerize Astro site

on:
    # Runs on pushes targeting the default branch
    push:

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: "build"
    cancel-in-progress: false

env:
    BUILD_PATH: "." # default value when not using subfolders
    IMAGE_NAME: "implica-devops-practice-app"

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        permissions:
            packages: write
            contents: read
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Detect package manager
              id: detect-package-manager
              run: |
                  if [ -f "${{ github.workspace }}/yarn.lock" ]; then
                    echo "manager=yarn" >> $GITHUB_OUTPUT
                    echo "command=install" >> $GITHUB_OUTPUT
                    echo "runner=yarn" >> $GITHUB_OUTPUT
                    exit 0
                  elif [ -f "${{ github.workspace }}/package.json" ]; then
                    echo "manager=npm" >> $GITHUB_OUTPUT
                    echo "command=ci" >> $GITHUB_OUTPUT
                    echo "runner=npx --no-install" >> $GITHUB_OUTPUT
                    exit 0
                  else
                    echo "Unable to determine package manager"
                    exit 1
                  fi
            - name: Setup Node
              uses: actions/setup-node@v3
              with:
                  node-version: "20.18.3"
                  cache: ${{ steps.detect-package-manager.outputs.manager }}
                  cache-dependency-path: ${{ env.BUILD_PATH }}/package-lock.json
            - name: Install dependencies
              run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
              working-directory: ${{ env.BUILD_PATH }}
            - name: Build with Astro
              run: ${{ steps.detect-package-manager.outputs.runner }} astro build
              working-directory: ${{ env.BUILD_PATH }}
            # Build and push image to GitHub Packages.
            # See also https://docs.docker.com/docker-hub/builds/
            - name: Build image
              run: docker build . --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
            - name: Log in to registry
              # This is where you will update the personal access token to GITHUB_TOKEN
              run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
            - name: Push image
              run: |
                  IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

                  # Change all uppercase to lowercase
                  IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
                  # Strip git ref prefix from version
                  VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
                  # Strip "v" prefix from tag name
                  [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
                  # Use Docker `latest` tag convention
                  [ "$VERSION" == "main" ] || [ "$VERSION" == "master" ] && VERSION=latest
                  echo IMAGE_ID=$IMAGE_ID
                  echo VERSION=$VERSION
                  docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
                  docker push $IMAGE_ID:$VERSION
